unit: template
template-resource: graphics_card
template-filter: graphics_card.driver in ['i915','amdgpu','amdgpu-pro']
template-engine: jinja2
template-unit: job
id: kivu/gstreamer_h264_encoding_{{ driver }}
category_id: kivu
plugin: shell
_summary: Encode H264 video with gstreamer and capture GPU usage
_description:
  This test uses gst-launch-1.0 in order to encode a H264 video with vaapih264enc module. The video
  is generated with videotestsrc.
requires:
  executable.name == "gst-launch-1.0"
  {% if driver == "i915" %}
  executable.name == "intel_gpu_top"
  {% else %}
  executable.name == "radeontop"
  {% endif %}
environ: GST_PLUGIN
command:
  tdb.py reset
  GPU_LOAD_CMD=$(which gpu-load.py)
  # NB : preserve PATH of user for the sudo (if not, intel_gpu_top will not be found)
  # --preserve-env can be used but it will not work because of the secure_path option 
  echo "{\"gpu_usage_{{ driver }}\": $(sudo env PATH=$PATH ${GPU_LOAD_CMD} --timeout=10 --gpu={{ driver }})}" | tdb.py insert &
  if [[ "{{ driver }}" == "i915" ]]; then
    timeout 10 gst-launch-1.0 --gst-plugin-path="${GST_PLUGIN}" videotestsrc ! video/x-raw,width=3840,height=2160 ! vaapih264enc ! fakesink
  else
    timeout 10 gst-launch-1.0 --gst-plugin-path="${GST_PLUGIN}" videotestsrc ! vaapih264enc ! fakesink
  fi
  ret_code=$?
  if [[ "$ret_code" -ne 124 ]]
  then
      echo "Error: $ret_code"
      exit 1
  fi
  tdb.py wait
  tdb.py check "gpu_usage_{{ driver }} > 5.0"

unit: template
template-resource: graphics_card
template-filter: graphics_card.driver in ['i915','amdgpu','amdgpu-pro']
template-engine: jinja2
template-unit: job
id: kivu/gstreamer_h264_decoding_{{ driver }}
category_id: kivu
plugin: shell
_summary: Decode H264 video with gstreamer and capture GPU usage
depends:
  kivu-common/prepare-test-data
requires:
  executable.name == "gst-launch-1.0"
  {% if driver == "i915" %}
  executable.name == "intel_gpu_top"
  {% else %}
  executable.name == "radeontop"
  {% endif %}
environ: GST_PLUGIN
command:
  tdb.py reset
  GPU_LOAD_CMD=$(which gpu-load.py)
  # NB : preserve PATH of user for the sudo (if not, intel_gpu_top will not be found)
  # --preserve-env can be used but it will not work because of the secure_path option 
  echo "{\"gpu_usage_{{ driver }}\": $(sudo env PATH=$PATH ${GPU_LOAD_CMD} --timeout=10 --gpu={{ driver }})}" | tdb.py insert &
  timeout 10 gst-launch-1.0 --gst-plugin-path="${GST_PLUGIN}" -v playbin uri=file://"${PLAINBOX_PROVIDER_DATA}"/bbb_h264_2160p_60fps_extract.mp4
  ret_code=$?
  if [[ "$ret_code" -ne 124 ]]
  then
      echo "Error: $ret_code"
      exit 1
  fi
  tdb.py wait
  tdb.py check "gpu_usage_{{ driver }} > 5.0"

id: kivu/chromium_hardware_compositing
category_id: kivu
flags: simple
user: root
_summary: Grab chrome://gpu url and inspect for HW compositor.
depends:
  kivu-common/prepare-test-data
requires:
  executable.name == "ydotool"
  executable.name == "wl-paste"
  snap.name == "chromium"
environ:
  # necessary for local mode
  XDG_SESSION_TYPE
  XDG_RUNTIME_DIR
  NORMAL_USER
command:
  # Launch the chromium browser.
  echo XDG_SESSION_TYPE "${XDG_SESSION_TYPE}"
  PLAY_TIMEOUT=20
  sudo --preserve-env -u "${NORMAL_USER}" timeout ${PLAY_TIMEOUT} bash -c 'chromium --start-maximized \
                                                                                    --new-window \
                                                                                    --enable-logging=stderr 2>&1 \
                                                                                    file:///home/"${NORMAL_USER}"/checkbox-test-data/h264-video.html \
                                                                                    | tee "${PLAINBOX_SESSION_SHARE}"/chromium_hardware_compositing_browser.log' &
  # Empty the clipboard
  wl-copy ""
  # Grab the contents from the browser
  copy_chrome_url_v0_ydo.sh chrome://gpu
  # Paste the clipboard
  wl-paste | tee "${PLAINBOX_SESSION_SHARE}"/chromium_hardware_compositing.log
  # If it says "Software only", we should fail the test.
  grep "Compositing: Hardware accelerated" "${PLAINBOX_SESSION_SHARE}"/chromium_hardware_compositing.log
  if [[ "$?" -eq 0 ]] # No lines selected by grep?
  then
      exit 0
  fi
  echo "Lacks hardware compositing."
  exit 1

id: kivu/chromium_flags_check
category_id: kivu
flags: simple
user: root
_summary: Grab chrome://version url and inspect the flags.
requires:
  executable.name == "ydotool"
  executable.name == "wl-paste"
  snap.name == "chromium"
depends:
  kivu-common/prepare-test-data
environ:
  # necessary for local mode
  XDG_SESSION_TYPE
  XDG_RUNTIME_DIR
  NORMAL_USER
command:
  echo XDG_SESSION_TYPE "${XDG_SESSION_TYPE}"
  # Launch the chromium browser.
  PLAY_TIMEOUT=20
  sudo --preserve-env -u "${NORMAL_USER}" timeout ${PLAY_TIMEOUT} bash -c 'chromium --start-maximized \
                                                                                    --enable-logging=stderr 2>&1 \
                                                                                    file:///home/"${NORMAL_USER}"/checkbox-test-data/h264-video.html \
                                                                                    | tee "${PLAINBOX_SESSION_SHARE}"/chromium_flags_check.log' &
  # Empty the clipboard
  wl-copy ""
  # Grab the contents from the browser
  copy_chrome_url_v0_ydo.sh chrome://version
  # Paste the clipboard
  wl-paste | tee "${PLAINBOX_SESSION_SHARE}"/chromium_flags.log
  # If it misses crucial flags, we fail the test.
  grep "enable-features=.*VaapiVideoDecoder" "${PLAINBOX_SESSION_SHARE}"/chromium_flags.log
  ret_code=$?
  if [[ "$ret_code" -ne 0 ]] # No lines selected by grep?
  then
      echo "VaapiVideoDecoder not enabled or other errors ($ret_code)."
      exit 1
  fi
  grep "enable-features=.*VaapiVideoEncoder" "${PLAINBOX_SESSION_SHARE}"/chromium_flags.log
  ret_code=$?
  if [[ "$ret_code" -ne 0 ]] # No lines selected by grep?
  then
      echo "VaapiVideoEncoder not enabled or other errors ($ret_code)."
      exit 1
  fi
  grep "enable-features=.*VaapiVideoDecodeLinuxGL" "${PLAINBOX_SESSION_SHARE}"/chromium_flags.log
  ret_code=$?
  if [[ "$ret_code" -ne 0 ]] # No lines selected by grep?
  then
      echo "VaapiVideoDecodeLinuxGL not enabled or other errors ($ret_code)."
      exit 1
  fi
  exit 0

unit: template
template-resource: graphics_card
template-filter: graphics_card.driver in ['i915','amdgpu','amdgpu-pro']
template-engine: jinja2
template-unit: job
id: kivu/chromium_h264_decoding_{{ driver }}
category_id: kivu
flags: simple
user: root
_summary: Play H264 video using Chromium (VAAPI enabled) and capture GPU usage
depends:
  kivu-common/prepare-test-data
requires:
  snap.name == "chromium"
  {% if driver == "i915" %}
  executable.name == "intel_gpu_top"
  {% else %}
  executable.name == "radeontop"
  {% endif %}
environ:
  # necessary for local mode
  XDG_SESSION_TYPE
  XDG_RUNTIME_DIR
  NORMAL_USER
command:
  PLAY_TIMEOUT=30
  echo "{\"gpu_usage_hw_enabled\": $(gpu-load.py --timeout=${PLAY_TIMEOUT} --gpu={{ driver }})}" | tdb.py insert --session-id=check_chromium_h264_decoding &
  # Play fullscreen looping video in Chromium
  echo XDG_SESSION_TYPE "${XDG_SESSION_TYPE}"
  sudo --preserve-env -u "${NORMAL_USER}" timeout ${PLAY_TIMEOUT} bash -c 'chromium --start-fullscreen \
                                                                                    --enable-logging=stderr 2>&1 \
                                                                                    file:///home/"${NORMAL_USER}"/checkbox-test-data/h264-video.html \
                                                                                    | tee "${PLAINBOX_SESSION_SHARE}"/chromium_h264_decoding_vaapi_enabled.log'
  sudo_result=$?
  if [[ "$sudo_result" -ne 124 ]]
  then
      echo "Error. The sudo-timeout-chromium command returned $sudo_result"
      exit 1
  fi

unit: template
template-resource: graphics_card
template-filter: graphics_card.driver in ['i915','amdgpu','amdgpu-pro']
template-engine: jinja2
template-unit: job
id: kivu/chromium_h264_decoding_vaapi_disabled_{{ driver }}
category_id: kivu
flags: simple
user: root
_summary: Play H264 video using Chromium (VAAPI disabled) and capture GPU usage
depends:
  kivu-common/prepare-test-data
requires:
  snap.name == "chromium"
  {% if driver == "i915" %}
  executable.name == "intel_gpu_top"
  {% else %}
  executable.name == "radeontop"
  {% endif %}
environ:
  # necessary for local mode
  XDG_SESSION_TYPE
  XDG_RUNTIME_DIR
  NORMAL_USER
command:
  PLAY_TIMEOUT=30
  echo "{\"gpu_usage_hw_disabled\": $(gpu-load.py --timeout=${PLAY_TIMEOUT} --gpu={{ driver }})}" | tdb.py insert --session-id=check_chromium_h264_decoding &
  # Play fullscreen looping video in Chromium (HW decoder feature disabled)
  echo XDG_SESSION_TYPE "${XDG_SESSION_TYPE}"
  sudo --preserve-env -u "${NORMAL_USER}" timeout ${PLAY_TIMEOUT} bash -c 'chromium --start-fullscreen \
                                                                                    --disable-features=VaapiVideoDecoder \
                                                                                    --enable-logging=stderr 2>&1 \
                                                                                    file:///home/"${NORMAL_USER}"/checkbox-test-data/h264-video.html \
                                                                                    | tee "${PLAINBOX_SESSION_SHARE}"/chromium_h264_decoding_vaapi_disabled.log'
  sudo_result=$?
  if [[ "$sudo_result" -ne 124 ]]
  then
      echo "Error. The sudo-timeout-chromium command returned $sudo_result"
      exit 1
  fi

id: kivu/chromium_h264_decoding_no_embed
category_id: kivu
flags: simple
user: root
_summary: Play non-embedded H264 video using Chromium (VAAPI enabled)
depends:
  kivu-common/prepare-test-data
requires:
  snap.name == "chromium"
command:
  echo XDG_SESSION_TYPE "${XDG_SESSION_TYPE}"
  # Play fullscreen looping video in Chromium
  sudo --preserve-env -u "${NORMAL_USER}" timeout 30 bash -c 'chromium --start-fullscreen \
                                                                       --enable-logging=stderr 2>&1 \
                                                                       /home/"${NORMAL_USER}"/checkbox-test-data/bbb_h264_2160p_60fps_extract.mp4 \
                                                                       | tee "${PLAINBOX_SESSION_SHARE}"/chromium_h264_decoding_no_embed.log'
  sudo_result=$?
  if [[ "$sudo_result" -ne 124 ]]
  then
      echo "Error: $sudo_result"
      exit 1
  fi
  parse_chromium_logs.py "${PLAINBOX_SESSION_SHARE}"/chromium_h264_decoding_no_embed.log

unit: template
template-resource: graphics_card
template-filter: graphics_card.driver in ['i915','amdgpu','amdgpu-pro']
template-engine: jinja2
template-unit: job
id: kivu/check_chromium_hw_decoder_{{ driver }}
category_id: kivu
flags: simple
_summary: Make sure video was played in Chromium using a hardware decoder
depends:
  kivu/chromium_h264_decoding_{{ driver }}
command:
  parse_chromium_logs.py "${PLAINBOX_SESSION_SHARE}"/chromium_h264_decoding_vaapi_enabled.log

unit: template
template-resource: graphics_card
template-filter: graphics_card.driver in ['i915','amdgpu','amdgpu-pro']
template-engine: jinja2
template-unit: job
id: kivu/chromium_h264_encoding_{{ driver }}
category_id: kivu
flags: simple
user: root
_summary: Encode H264 stream from within Chromium (VAAPI enabled) and capture GPU usage
depends:
  kivu-common/prepare-test-data
requires:
  snap.name == "chromium"
  {% if driver == "i915" %}
  executable.name == "intel_gpu_top"
  {% else %}
  executable.name == "radeontop"
  {% endif %}
environ:
  # necessary for local mode
  XDG_SESSION_TYPE
  XDG_RUNTIME_DIR
  NORMAL_USER
command:
  PLAY_TIMEOUT=10
  echo "{\"gpu_usage_hw_enabled\": $(gpu-load.py --timeout=${PLAY_TIMEOUT} --gpu={{ driver }})}" | tdb.py insert --session-id=check_chromium_h264_encoding &
  # Open video encoding page in Chromium
  sudo --preserve-env -u "${NORMAL_USER}" timeout ${PLAY_TIMEOUT} \
    chromium \
    --start-fullscreen \
    --enable-logging=stdout \
    file:///home/"${NORMAL_USER}"/checkbox-test-data/video-encoding.html?encoding=h264 > \
    "${PLAINBOX_SESSION_SHARE}"/chromium_h264_encoding_vaapi_enabled.log
  sudo_retval=$?
  cat "${PLAINBOX_SESSION_SHARE}"/chromium_h264_encoding_vaapi_enabled.log
  if [[ "$sudo_retval" -eq 124 ]]
  then
      exit 0
  else
      echo "Error: $sudo_retval"
      exit 1
  fi

unit: template
template-resource: graphics_card
template-filter: graphics_card.driver in ['i915','amdgpu','amdgpu-pro']
template-engine: jinja2
template-unit: job
id: kivu/chromium_h264_encoding_vaapi_disabled_{{ driver }}
category_id: kivu
flags: simple
user: root
_summary: Encode H264 stream from within Chromium (VAAPI disabled) and capture GPU usage
depends:
  kivu-common/prepare-test-data
requires:
  snap.name == "chromium"
  {% if driver == "i915" %}
  executable.name == "intel_gpu_top"
  {% else %}
  executable.name == "radeontop"
  {% endif %}
environ:
  # necessary for local mode
  XDG_SESSION_TYPE
  XDG_RUNTIME_DIR
  NORMAL_USER
command:
  PLAY_TIMEOUT=10
  echo "{\"gpu_usage_hw_disabled\": $(gpu-load.py --timeout=${PLAY_TIMEOUT} --gpu={{ driver }})}" | tdb.py insert --session-id=check_chromium_h264_encoding &
  # Open video encoding page in Chromium
  # (HW decoder feature disabled)
  sudo --preserve-env -u "${NORMAL_USER}" timeout ${PLAY_TIMEOUT} \
    chromium \
    --start-fullscreen \
    --disable-features=VaapiVideoEncoder \
    --enable-logging=stdout file:///home/"${NORMAL_USER}"/checkbox-test-data/video-encoding.html?encoding=h264 > \
    "${PLAINBOX_SESSION_SHARE}"/chromium_h264_encoding_vaapi_disabled.log
  sudo_retval=$?
  cat "${PLAINBOX_SESSION_SHARE}"/chromium_h264_encoding_vaapi_disabled.log
  if [[ "$sudo_retval" -eq 124 ]]
  then
      exit 0
  else
      echo "Error: $sudo_retval"
      exit 1
  fi

#id: kivu/chromium_capture_logs_webrtc_broadcast
#category_id: kivu
#flags: simple
#command:
#  timeout 30 chromium --start-fullscreen --enable-logging=stderr 2>&1 http://localhost:4000/ | tee "${PLAINBOX_SESSION_SHARE}"/chromium_webrtc_broadcast_vaapi_enabled.log &
#  sleep 1 &
#  pidstat 30 1 -uhlH -G .*chrom.* > "${PLAINBOX_SESSION_SHARE}"/chromium_webrtc_broadcast_vaapi_enabled_pidstat.log
#
#id: kivu/chromium_capture_logs_webrtc_broadcast_vaapi_disabled
#category_id: kivu
#flags: simple
#command:
#  timeout 30 chromium --start-fullscreen --disable-features=VaapiVideoDecoder --enable-logging=stderr 2>&1 http://localhost:4000/ | tee "${PLAINBOX_SESSION_SHARE}"/chromium_webrtc_broadcast_vaapi_disabled.log &
#  sleep 1 &
#  pidstat 30 1 -uhlH -G .*chrom.* > "${PLAINBOX_SESSION_SHARE}"/chromium_webrtc_broadcast_vaapi_disabled_pidstat.log
#
#id: kivu/check_cpu_usage_logs_webrtc_broadcast
#category_id: kivu
#flags: simple
#_summary: Compare average CPU usage with/without hardware acceleration (WebRTC broadcast)
#depends:
#  kivu/chromium_capture_logs_webrtc_broadcast
#  kivu/chromium_capture_logs_webrtc_broadcast_vaapi_disabled
#command:
#  parse_pidstat_logs.py "${PLAINBOX_SESSION_SHARE}"/chromium_webrtc_broadcast_vaapi_disabled_pidstat.log "${PLAINBOX_SESSION_SHARE}"/chromium_webrtc_broadcast_vaapi_enabled_pidstat.log
#
#id: kivu/cpu_usage_attachment_webrtc_broadcast.json
#category_id: kivu
#plugin: attachment
#depends:
#  kivu/chromium_capture_logs_webrtc_broadcast
#  kivu/chromium_capture_logs_webrtc_broadcast_vaapi_disabled
#command:
#  parse_pidstat_logs.py --json "${PLAINBOX_SESSION_SHARE}"/chromium_webrtc_broadcast_vaapi_disabled_pidstat.log "${PLAINBOX_SESSION_SHARE}"/chromium_webrtc_broadcast_vaapi_enabled_pidstat.log

unit: template
template-resource: graphics_card
template-filter: graphics_card.driver in ['i915','amdgpu','amdgpu-pro']
template-engine: jinja2
template-unit: job
id: kivu/check_chromium_h264_decoding_{{ driver }}
category_id: kivu
flags: simple
_summary: Check average GPU usage (H264 video decoding on Chromium)
_description: Compare average GPU usage with/without hardware acceleration (H264 video decoding on Chromium)
depends:
  kivu/chromium_h264_decoding_{{ driver }}
  kivu/chromium_h264_decoding_vaapi_disabled_{{ driver }}
command:
  tdb.py wait
  tdb.py check --session-id=check_chromium_h264_decoding "gpu_usage_hw_enabled > gpu_usage_hw_disabled"

unit: template
template-resource: graphics_card
template-filter: graphics_card.driver in ['i915','amdgpu','amdgpu-pro']
template-engine: jinja2
template-unit: job
id: kivu/check_chromium_h264_encoding_{{ driver }}
category_id: kivu
flags: simple
_summary: Check GPU usage (H264 video encoding on Chromium)
_description: Compare average GPU usage with/without hardware acceleration (H264 video encoding on Chromium)
depends:
  kivu/chromium_h264_encoding_{{ driver }}
  kivu/chromium_h264_encoding_vaapi_disabled_{{ driver }}
command:
  tdb.py wait
  tdb.py check --session-id=check_chromium_h264_encoding "gpu_usage_hw_enabled > gpu_usage_hw_disabled"

id: kivu/hardware_overlay_mpv
category_id: kivu
plugin: shell
user: root
_summary: Play a video with mpv and check for hardware overlay use.
depends:
  kivu-common/prepare-test-data
requires:
  executable.name == "mpv"
  executable.name == "gfxi"
command:
  export GFXI_DEVICE=`active_dri_device.sh`
  if [ -z $GFXI_DEVICE ]
  then
    echo Could not find a dri device actively driving a screen.
    exit 1
  else
    echo Using dri device: $GFXI_DEVICE
  fi
  # Play a video using mpv.
  exec sudo --preserve-env -u "${NORMAL_USER}" timeout 10 mpv "${PLAINBOX_PROVIDER_DATA}"/bbb_h264_2160p_60fps_extract.mp4 &
  sleep 3
  # Check which CRTC is active at the moment.
  # That is where we expect the overlay to show up.
  CRTC=`gfxi crtc ACTIVE:1`
  if [ -z "$CRTC" ]
  then
    echo Failed to get active CRTC for $GFXI_DEVICE
    exit 1
  fi
  echo Using CRTC with id $CRTC from device $GFXI_DEVICE
  # List the active planes on this crtc.
  gfxi --annotate CRTC_ID:$CRTC ACTIVE:1 | tee "${PLAINBOX_SESSION_SHARE}"/mpv_planes.log
  # See if the list has an entry with an overlay plane.
  grep "Overlay" "${PLAINBOX_SESSION_SHARE}"/mpv_planes.log
  ret_code=$?
  if [[ "$ret_code" -ne 0 ]] # No lines selected by grep?
  then
    echo "No hardware overlay plane active or other errors ($ret_code)."
    exit 1
  else
    echo Overlay plane usage detected.
    cat "${PLAINBOX_SESSION_SHARE}"/mpv_planes.log
    exit 0
  fi

unit: template
template-resource: graphics_card
template-filter: graphics_card.driver in ['i915']
template-engine: jinja2
template-unit: job
id: kivu/stress_mpv_h264_decoding_{{ driver }}
category_id: kivu
flags: simple
user: root
_summary: Play twenty H264 videos (VAAPI enabled) to check maxed out hw accel
depends:
  kivu-common/prepare-test-data
requires:
  executable.name == "mpv"
  executable.name == "intel_gpu_top"
environ:
  # necessary for local mode
  XDG_SESSION_TYPE
  XDG_RUNTIME_DIR
  NORMAL_USER
command:
  tdb.py reset
  GPU_LOAD_CMD=$(which gpu-thresh.py)
  # Since it's a stress test, set the threshold near 100% video engine utilization
  echo "{\"gpu_usage_over_threshold_duration_{{ driver }}\": $(sudo ${GPU_LOAD_CMD} --timeout=30 --video_engine=Video --threshold=99.3 --gpu={{ driver }})}" | tdb.py insert &
  PLAY_TIMEOUT=12
  for i in {1..20}; do
  exec sudo --preserve-env -u "${NORMAL_USER}" timeout 30 mpv --loop -no-audio --geometry=20% "${PLAINBOX_PROVIDER_DATA}"/bbb_h264_2160p_60fps_extract.mp4 &
  done
  sleep ${PLAY_TIMEOUT}
  tdb.py wait
  # Checks the number of ms spent above the threshold for the video engine decoder
  tdb.py check "gpu_usage_over_threshold_duration_{{ driver }} > 23000"
  # If HW decode fails, video engine activity will not meet the threshold for
  # long enough so no check needed

unit: template
template-resource: graphics_card
template-filter: graphics_card.driver in ['i915']
template-engine: jinja2
template-unit: job
id: kivu/stress_chromium_h264_decoding_{{ driver }}
category_id: kivu
flags: simple
user: root
_summary: Play twenty H264 videos in Chromium to check maxed out hw accel
depends:
  kivu-common/prepare-test-data
requires:
  snap.name == "chromium"
  executable.name == "intel_gpu_top"
environ:
  # necessary for local mode
  XDG_SESSION_TYPE
  XDG_RUNTIME_DIR
  NORMAL_USER
command:
  INTEL_GEN=$(get_intel_gen.sh)
  if [ $INTEL_GEN -ge 12 ]
  then
      video_engine=VideoEnhance
  else
      video_engine=Video
  fi 
  PLAY_TIMEOUT=30
  echo "{\"gpu_usage_over_threshold_duration_{{ driver }}\": $(gpu-thresh.py --threshold=99 --video_engine=${video_engine} --timeout=${PLAY_TIMEOUT} --gpu={{ driver }})}" | tdb.py insert --session-id=check_chromium_h264_decoding &
  # Play looping video in Chromium
  echo XDG_SESSION_TYPE "${XDG_SESSION_TYPE}"
  for i in {1..20}; do
  sudo --preserve-env -u "${NORMAL_USER}" bash -c "timeout ${PLAY_TIMEOUT} chromium --new-window --window-size=800,600\
                                                                                    file:///home/"${NORMAL_USER}"/checkbox-test-data/h264-video.html &"
  done
  sleep ${PLAY_TIMEOUT}
  tdb.py wait
  tdb.py check "gpu_usage_over_threshold_duration_{{ driver }} > 20000"
